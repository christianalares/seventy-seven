generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum TEAM_ROLE_ENUM {
  OWNER
  MEMBER
}

model User {
  id                             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                     DateTime     @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?    @db.Timestamptz(6)
  email                          String       @unique @db.VarChar
  full_name                      String
  image_url                      String?
  current_team_id                String       @db.Uuid
  current_team                   Team         @relation(fields: [current_team_id], references: [id])
  teams                          UserOnTeam[]
  messages                       Message[]
  team_invites                   TeamInvite[]
  tickets                        Ticket[]
  notification_email_new_ticket  Boolean      @default(true)
  notification_email_new_message Boolean      @default(true)

  @@map("users")
}

model Team {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @db.Timestamptz(6)
  name              String
  image_url         String?
  members           UserOnTeam[]
  current_users     User[]
  tickets           Ticket[]
  is_personal       Boolean           @default(false)
  auth_token        String?
  invites           TeamInvite[]
  ticket_tags       TicketTag[]
  integration_slack IntegrationSlack?

  @@map("teams")
}

model IntegrationSlack {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @db.Timestamptz(6)
  team_id                 String    @unique @db.Uuid
  team                    Team      @relation(fields: [team_id], references: [id])
  slack_access_token      String
  slack_team_id           String
  slack_team_name         String
  slack_channel_id        String
  slack_channel           String
  slack_configuration_url String
  slack_url               String
  slack_bot_user_id       String

  @@map("integrations_slack")
}

model UserOnTeam {
  user_id    String         @db.Uuid
  team_id    String         @db.Uuid
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  updated_at DateTime?      @db.Timestamptz(6)
  role       TEAM_ROLE_ENUM
  team       Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, team_id])
  @@unique([user_id, team_id])
  @@map("users_on_teams")
}

model Ticket {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_id            String              @unique
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?           @db.Timestamptz(6)
  team_id             String              @db.Uuid
  team                Team                @relation(fields: [team_id], references: [id])
  subject             String
  meta                Json?
  messages            Message[]
  snoozed_until       DateTime?
  closed_at           DateTime?
  event_id            String?
  starred_at          DateTime?
  assigned_to_user_id String?             @db.Uuid
  assigned_to_user    User?               @relation(fields: [assigned_to_user_id], references: [id])
  tags                TicketTagOnTicket[]

  @@map("tickets")
}

model TicketTag {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime            @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?           @db.Timestamptz(6)
  name        String
  color       String
  team_id     String              @db.Uuid
  team        Team                @relation(fields: [team_id], references: [id])
  ticket_tags TicketTagOnTicket[]

  @@unique([name, team_id])
  @@map("ticket_tags")
}

model TicketTagOnTicket {
  ticket_id  String    @db.Uuid
  tag_id     String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  ticket Ticket    @relation(fields: [ticket_id], references: [id])
  tag    TicketTag @relation(fields: [tag_id], references: [id])

  @@id([ticket_id, tag_id])
  @@unique([ticket_id, tag_id])
  @@map("ticket_tags_on_tickets")
}

model Message {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @db.Timestamptz(6)
  ticket_id               String    @db.Uuid
  ticket                  Ticket    @relation(fields: [ticket_id], references: [id])
  handler_id              String?   @db.Uuid
  handler                 User?     @relation(fields: [handler_id], references: [id])
  sent_from_full_name     String?
  sent_from_email         String?
  sent_from_avatar_url    String?
  body                    String
  email_id                String?
  unable_to_parse_content Boolean   @default(false)

  @@map("messages")
}

model TeamInvite {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  email              String
  team_id            String   @db.Uuid
  team               Team     @relation(fields: [team_id], references: [id])
  created_by_user_id String   @db.Uuid
  created_by         User     @relation(fields: [created_by_user_id], references: [id])
  code               String   @unique

  @@unique([email, team_id])
  @@map("team_invites")
}

model Waitlist {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  email      String   @unique
  email_id   String?
  is_invited Boolean  @default(false)

  @@map("waitlist")
}
